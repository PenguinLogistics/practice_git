git 操作

一、初始化和提交操作

1.初始化git
在文件目录中初始化一个本地库。命令：
git init

2.查看状态。命令：
git status

3.查看隐藏目录（linux）。命令：
ls -la
	通过管道
ls -la | less

4.提交到暂存区。命令：
git add 文件名
	提交后通过git status 可查看暂存区

5.删除暂存区文件，但不影响工作区。命令：
git rm --cached 文件名

6.从暂存区提交到本地库。命令：
git commit 文件名
	提交后进入vim编辑提交注释
git commit -m "注释" 文件名
	直接提交并写注释
============================================================================

二、版本控制

1.显示版本。命令：
git log
	或更精简
git log --pretty=oneline
git log --oneline
	或显示移动到当前版本需要的步数
git reflog
	多屏显示控制（linux）
空格 向下翻页
b 向上翻页
q 退出

2.基于索引操作版本。命令：
git reset --hard 索引值（git reflog)


3.基于^符号。只能后退不能前进。命令：
git reset --hard HEAD^
	每个“^”表示后退一步

4.基于~符号。只能后退。命令：
git reset --hard HEAD~数字
	表示后退 数字 步

5.git reset的三个参数
--soft 仅仅在本地库移动head指针
--mixed 在本地库移动head指针，并重置暂存区
--hard 在本地库移动head指针，重置暂存区和工作区

6.删除文件。命令：
rm 文件名
提交到暂存区 提交到本地库
	git永久保留版本，只要回退版本就可以恢复永久删除的文件

7.添加到暂存区的删除文件找回。命令：
git reset --hard HEAD

8.比较文件
git diff 文件名
	以行为单位，比较修改前后差异
	无参数表示与暂存区比较
git diff HEAD 文件名
	与本地库比较
git diff HEAD^（~数字） 文件名
	与本地库历史版本比较

不指定文件名时比较当前工作区中所有文件
============================================================================

三、分支管理（类似多线程？？）

常用：
master 主干分支
feature 实现新特性的分支
hot_fix 修复分支

1.查看分支。命令：
git branch -v

2.新建分支。命令：
git branch 分支名

3.切换分支。命令：
git checkout 分支名

4.删除已完成分支。命令：
（先切换到其他分支）
git branch -d 分支名

5.合并分支

1）切换到接受修改分支（被合并分支合并到这个分支）
git checkout 分支名

2）执行merge命令：
git merge 被合并分支

3）处理冲突部分
表现：
aaaaa
bbbbbb
<<<<<<< HEAD
cccccc@@@@@@@ edit by master
=======
cccccc@@@@@@@ edit by hot_fix
>>>>>>> hot_fix
UUUUUUUUU edit by hot_fix
ddddddd

1）删除文件中多余部分。命令：
vim 文件名
2）提交到暂存区
git add 文件名
3）提交到本地库
git commit （不加文件名）
============================================================================

四、github远程库

1.创建远程库
勾选readme可以导致本地库与远程库冲突

2.查看远程库地址。命令：
git remote -v

3.创建远程库地址别名。命令：
git remote add origin(别名) 远程库地址

使用ssh地址
	进入家目录 
	cd ~
	生成ssh
	ssh-keygen -t rsa -C github账号邮箱
	进入ssh目录
	cd ~/.ssh
	复制id_rsa.pub内容到github设置-->ssh key
	cat id_rsa.pub
	
git remote add origin_ssh ssh远程库地址

修改地址
	直接修改：
git remote set-url origin xxxxx.git
	先删后加 ：
git remote rm origin
git remote add origin xxxxx.git

4.推送操作。命令
git push origin master（分支名）

5.克隆操作。命令
git clone 仓库地址 
	效果：
1）完整的把远程库下载到本地
2）创建origin远程地址别名
3）初始化本地库
（克隆的仓库可以在本地库修改提交，但不能推送到远程库，除非加入团队）
	邀请团队成员：
	远程库-->Setting-->Collaborators
	Add collaborator 
	复制邀请链接 
	被邀请人通过链接接受邀请加入团队

6.pull（拉取） = fetch + merge
1）抓取远程库分支。命令：
git fetch origin master
	此时本地工作区不变

2）切换到抓取的分支。命令：
git checkout origin/master
	可以查看抓取的分支

3）切换到master分支，合并 master 和 origin/master。命令：
git merge origin/master

或直接拉取。命令：
git pull origin master

若操作的不是远程库最新版本，则不能推送到远程库。
必须先拉取远程库最新版本，与本地库分支合并后才能推送。
============================================================================

五、垮团队协作

1.点击Fork复制到自己的远程库

2.远程库 克隆到 本地库
  本地库进行修改
  本地库 推送到 远程库	

3.创建新的 pull request

4.原仓库所有者在github进行审核，merge pull request 合并代码

5.将远程库修改拉取到本地













































